# Routine to upgrade Nextcloud version
# See variable NEXTCLOUD-VERSION to build your specific version

- hosts: all
  gather_facts: no
  vars:
    nextcloud_url: https://
    nextcloud_project_dir: /root/projects/nextcloud-docker
    nextcloud_app_container: app
    nextcloud_version: 31-fpm

  tasks:
    - name: Prune everything
      community.docker.docker_prune:
        containers: true
        images: true
        networks: true
        volumes: true
        builder_cache: true

    - name: Get nextcloud version
      community.docker.docker_compose_v2_exec:
        service: app
        user: www-data
        project_src: "{{ nextcloud_project_dir }}"
        command: php occ --version
      register: result

    - name: Print stdout
      ansible.builtin.debug:
        var: result

    - name: Build Nextcloud containers with specific version
      ansible.builtin.command: >
        docker compose build 
        --build-arg NEXTCLOUD_VERSION=31-fpm 
        --pull 
        --no-cache
      args:
        chdir: "{{ nextcloud_project_dir }}"

#    - name: Build images
#      community.docker.docker_compose_v2:
#        project_src: "{{ nextcloud_project_dir }}"
#        build: always
#      register: output
#
#    - name: Build images
#      community.docker.docker_image_build:
#        name: "{{ nextcloud_version }}"
#        path: "{{ nextcloud_project_dir }}/.docker/app"
#        args: NEXTCLOUD_VERSION="{{ nextcloud_version }}"
#      register: output

    - name: Show results
      ansible.builtin.debug:
        var: output

    - name: Enable maintenance mode
      community.docker.docker_compose_v2_exec:
        service: "{{ nextcloud_app_container }}"
        user: www-data
        project_src: "{{ nextcloud_project_dir }}"
        command: "php occ maintenance:mode --on"
      register: result

    - name: Restart containers
      community.docker.docker_compose_v2:
        project_src: "{{ nextcloud_project_dir }}"
        state: restarted
        recreate: always
      register: output

    - name: Show results
      ansible.builtin.debug:
        var: output

    # Wait for Nextcloud container to be ready
    - name: Wait for Nextcloud to be ready
      ansible.builtin.uri:
        url: "{{ nextcloud_url }}/status.php"
        return_content: yes
        status_code: 200
        timeout: 10
      register: nextcloud_status
      until: nextcloud_status.status == 200 and '"installed":true' in nextcloud_status.content
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Run additional occ commands
      community.docker.docker_compose_v2_exec:
        service: "{{ nextcloud_app_container }}"
        user: www-data
        project_src: "{{ nextcloud_project_dir }}"
        command: "php occ {{ item }}"
      loop:
        - db:add-missing-columns
        - db:add-missing-indices
        - db:add-missing-primary-keys
        - maintenance:repair --include-expensive
        - config:system:set maintenance_window_start --type=integer --value=1
        - app:update --all
      ignore_errors: yes

    - name: Disable nextcloud maintenance mode
      community.docker.docker_compose_v2_exec:
        service: "{{ nextcloud_app_container }}"
        user: www-data
        project_src: "{{ nextcloud_project_dir }}"
        command: "php occ maintenance:mode --off"
      register: result

    - name: Get nextcloud version
      community.docker.docker_compose_v2_exec:
        service: "{{ nextcloud_app_container }}"
        user: www-data
        project_src: "{{ nextcloud_project_dir }}"
        command: "php occ --version"
      register: result

    - name: Print stdout
      ansible.builtin.debug:
        var: result.stdout

